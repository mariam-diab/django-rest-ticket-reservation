@api_view(["GET", "POST"])
def customer_view(request):
    if request.method == "GET":
        customers = Customer.objects.all()
        serializer = CustomerSerializers(customers, many = True)
        return Response(serializer.data)
    elif request.method == "POST":
        serializer = CustomerSerializers(data = request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.data, status=status.HTTP_400_BAD_REQUEST)

@api_view(["GET", "PUT", "DELETE"])
def customer_view_id(request, pk):
    try:
        customer = Customer.objects.get(id = pk)
    except Customer.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)
    if request.method == "GET":
        serializer = CustomerSerializers(customer, many = False)
        return Response(serializer.data)
    elif request.method == "PUT":
        serializer = CustomerSerializers(customer, data = request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    elif request.method == "DELETE":
        customer.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
    return Response(serializer.data, status=status.HTTP_400_BAD_REQUEST)

class CustomerView(APIView):
    def get(self, request):
        customers = Customer.objects.all()
        serializer = CustomerSerializers(customers, many = True)
        return Response(serializer.data)
    def post(self, request):
        serializer = CustomerSerializers(data = request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.data, status=status.HTTP_400_BAD_REQUEST)
      
class CustomerView(APIView):
    def get_object(self, pk):
        try:
            return Customer.objects.get(id = pk)
        except Customer.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)
    def get(self, request, pk):
        serializer = CustomerSerializers(self.get_object(pk), many = False)
        return Response(serializer.data)
    def put(self, request, pk):
        serializer = CustomerSerializers(self.get_object(pk), data = request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    def delete(self, request, pk):
        self.get_object(pk).delete()
        return Response(status=status.HTTP_204_NO_CONTENT)    
          
class MixinCustomer(mixins.ListModelMixin,
                  mixins.CreateModelMixin,
                  generics.GenericAPIView):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializers

    def get(self, request):
        return self.list(request)
    def post(self, request):
        return self.create(request)

class MixinCustomer(mixins.RetrieveModelMixin, 
                    mixins.UpdateModelMixin, 
                    mixins.DestroyModelMixin, 
                    generics.GenericAPIView):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializers
    def get(self, request, pk):
        return self.retrieve(request)
    def put(self, request, pk):
        return self.update(request)
    def delete(self, request, pk):
        return self.destroy(request)